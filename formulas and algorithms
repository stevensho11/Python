{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "module 9 homework",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyNjAI/EX0hjvyjlIFDqgkQC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/stevensho11/BCS109/blob/master/module_9_homework.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A7za_E59xgAA"
      },
      "source": [
        "##**Max, Min, Avg, Standard Deviation, and Geometric Avg**##\n",
        "\n",
        "The following functions will determine the Max, Min, Average, Standard Deviation, and Geometric Average from a given list of numbers."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iUMRG2zYxBhS"
      },
      "source": [
        "theList = [19, 32, 34, 33, 75, 81, 8, 4, 18, 38]\n",
        "\n",
        "def theMax(numbers):\n",
        "  max = -1\n",
        "  for k in numbers:\n",
        "    if max < k:\n",
        "      max = k\n",
        "  return max\n",
        "\n",
        "def theMin(numbers):\n",
        "  min = 100000000\n",
        "  for k in numbers:\n",
        "    if min > k:\n",
        "      min = k\n",
        "  return min\n",
        "\n",
        "def theAvg(numbers):\n",
        "  total = 0\n",
        "  for k in numbers:\n",
        "    total += k\n",
        "  return total/len(numbers)\n",
        "\n",
        "def theSD(numbers):\n",
        "  total = 0\n",
        "  avg = theAvg(numbers)\n",
        "  for k in numbers:\n",
        "    total += pow(k-avg, 2)\n",
        "  return pow(total/(len(numbers)-1),.5)\n",
        "\n",
        "def theGeoMean(numbers):\n",
        "  total = 1\n",
        "  for k in numbers:\n",
        "    total *= k\n",
        "  return pow(total, 1/len(numbers))\n",
        "\n",
        "\n",
        "print(f'The max is: {theMax(theList)}')\n",
        "print(f'The max is: {theMin(theList)}')\n",
        "print(f'The avg is: {theAvg(theList)}')\n",
        "print(f'The std is: {theSD(theList)}')\n",
        "print(f'The geo mean is: {theGeoMean(theList)}')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CLxbxnuGxyTq"
      },
      "source": [
        "##**Areas of Shapes**## \n",
        "\n",
        "The following function will ask the user whether they want to calculate the area of a triangle, circle, or square, and perform the calculations with user-provided measurements."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OrvnL7eV5Uel"
      },
      "source": [
        "import math\n",
        "\n",
        "def chooseShape():\n",
        "  val = int(input(\"1 for triangle, 2 for circle, 3 for square\"))\n",
        "  if val == 1:\n",
        "    triangleArea()\n",
        "  elif val == 2:\n",
        "    circleArea()\n",
        "  elif val == 3:\n",
        "    squareArea()\n",
        "  else:\n",
        "    print('Invalid input')\n",
        "\n",
        "def triangleArea():\n",
        "  base = float(input('What is the base?'))\n",
        "  height = float(input('What is the height?'))\n",
        "  print(f'The area of the triangle is {(base/height)/2}')\n",
        "\n",
        "def circleArea():\n",
        "  radius = float(input('What is the radius?'))\n",
        "  print(f'The area of the circle is {radius*radius*math.pi}')\n",
        "\n",
        "def squareArea():\n",
        "  side = float(input('What is the value of one side?'))\n",
        "  print(f'The area of the square is {side**2}')\n",
        "\n",
        "chooseShape()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CGgcw5-oypFN"
      },
      "source": [
        "##**Doubling a List or Doubling the Numbers in the List**##\n",
        "\n",
        "This function will repeat the numbers in a list, or double the value of the numbers in the list depending on what the user chooses."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hpd5xXNuy1kK"
      },
      "source": [
        "theList = [1, 2, 3]\n",
        "\n",
        "def userChoice(list):\n",
        "  val = int(input('Option 1: repeat the numbers in a list.\\n Option 2: double the value of the numbers in a list '))\n",
        "  if (val == 1):\n",
        "    repeatList(list)\n",
        "  elif (val == 2):\n",
        "    doubleList(list)\n",
        "  else:\n",
        "    print('Invalid input.')\n",
        "\n",
        "def repeatList(list):\n",
        "  print(list*2)\n",
        "\n",
        "def doubleList(list):\n",
        "  for k in range(len(list)):\n",
        "    list[k] *= 2\n",
        "  print(list)\n",
        "\n",
        "userChoice(theList)\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9pGBqqgb5Mh7"
      },
      "source": [
        "##**Concatenate two lists**##\n",
        "\n",
        "The following function takes in two lists and concatenates the elements within them"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MkpLx_PR5TTu",
        "outputId": "3105fa08-6ee0-4fa9-c8c0-10c092b30345",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "theList = [1, 2, 3]\n",
        "theList2 = [7, 8, 9]\n",
        "\n",
        "def concatenateList(list1, list2):\n",
        "  zipped = zip(list1,list2)\n",
        "  print(list(zipped))\n",
        "    \n",
        "\n",
        "concatenateList(theList, theList2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[(1, 7), (2, 8), (3, 9)]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YoQdvfK061vL"
      },
      "source": [
        "##**Return Primes**##\n",
        "\n",
        "The following function returns a list of primes up until the number entered by the user"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xvDmH9SQ-93T"
      },
      "source": [
        "def findPrimes():\n",
        "  choice = int(input('What number do you want me to stop at? '))\n",
        "  for num in range(2, choice + 1):\n",
        "   if num > 1:\n",
        "       for i in range(2, num):\n",
        "           if (num % i) == 0:\n",
        "               break\n",
        "       else:\n",
        "           print(num)\n",
        "\n",
        "findPrimes()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z2n5yjS7A7g9"
      },
      "source": [
        "##**Calculation**## \n",
        "\n",
        "The following function accepts two variables and processes the addition and subtraction of them in a single return call."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1zLfjkwwBMOM",
        "outputId": "7b5228b2-959a-41cd-d4ba-96bac74ab725",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "def Calculation(num1, num2):\n",
        "  numAdd = num1 + num2\n",
        "  numSubtract = num1 - num2\n",
        "  return numAdd, numSubtract\n",
        "\n",
        "print(Calculation(20, 10))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(30, 10)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IJ3j9F4eCRLI"
      },
      "source": [
        "##**More Calculation**##\n",
        "\n",
        "The following function solves this question:\n",
        "\n",
        "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qeRnci7mCvlk"
      },
      "source": [
        "def moreCalcs():\n",
        "  total = 0\n",
        "  for k in range(1000):\n",
        "    if k%3 == 0 or k%5 == 0:\n",
        "      total += k\n",
        "  print(total)\n",
        "\n",
        "moreCalcs()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YpLVqMd1H8kC"
      },
      "source": [
        "##**Fibonacci**##\n",
        "\n",
        "The following function will return the sum of the even valued Fibonacci numbers below 1000"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HZhRjZseIHB_"
      },
      "source": [
        "def evenSumFib(num):\n",
        "  total = 0\n",
        "  one, two = 0, 1\n",
        "  print(str(one) + '\\n' + str(two))\n",
        "  for i in range(num):\n",
        "    three = one + two\n",
        "    print(three)\n",
        "    one = two\n",
        "    two = three\n",
        "    if three % 2 == 0:\n",
        "      total += three\n",
        "  print(total)\n",
        "\n",
        "evenSumFib(5)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SWRmj7zeNR-f"
      },
      "source": [
        "##**Sum of fifths**##\n",
        "\n",
        "The following function solves this question:\n",
        "\n",
        "Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bQp1XiKqO0Tx"
      },
      "source": [
        "def ec():\n",
        "  sum = 0\n",
        "  i = 10\n",
        "  while i < 1000000:\n",
        "    digSum = 0\n",
        "    j = list(str(i))\n",
        "    for num in j:\n",
        "      digit = int(num) ** 5\n",
        "      digSum += digit\n",
        "    if digSum == i:\n",
        "      sum += i\n",
        "      print(i)\n",
        "    i += 1\n",
        "  print(sum)\n",
        "\n",
        "ec()"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
